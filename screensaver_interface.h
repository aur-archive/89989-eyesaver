/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -m -p screensaver_interface /usr/share/dbus-1/interfaces/org.freedesktop.ScreenSaver.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SCREENSAVER_INTERFACE_H_1222288518
#define SCREENSAVER_INTERFACE_H_1222288518

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.ScreenSaver
 */
class OrgFreedesktopScreenSaverInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.ScreenSaver"; }

public:
    OrgFreedesktopScreenSaverInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopScreenSaverInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<bool> GetActive()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("GetActive"), argumentList);
    }

    inline QDBusReply<uint> GetActiveTime()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("GetActiveTime"), argumentList);
    }

    inline QDBusReply<uint> GetSessionIdleTime()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("GetSessionIdleTime"), argumentList);
    }

    inline QDBusReply<uint> Inhibit(const QString &application_name, const QString &reason_for_inhibit)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(application_name) << qVariantFromValue(reason_for_inhibit);
        return callWithArgumentList(QDBus::Block, QLatin1String("Inhibit"), argumentList);
    }

    inline QDBusReply<void> Lock()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("Lock"), argumentList);
    }

    inline QDBusReply<bool> SetActive(bool e)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(e);
        return callWithArgumentList(QDBus::Block, QLatin1String("SetActive"), argumentList);
    }

    inline QDBusReply<void> SimulateUserActivity()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("SimulateUserActivity"), argumentList);
    }

    inline QDBusReply<uint> Throttle(const QString &application_name, const QString &reason_for_inhibit)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(application_name) << qVariantFromValue(reason_for_inhibit);
        return callWithArgumentList(QDBus::Block, QLatin1String("Throttle"), argumentList);
    }

    inline QDBusReply<void> UnInhibit(uint cookie)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(cookie);
        return callWithArgumentList(QDBus::Block, QLatin1String("UnInhibit"), argumentList);
    }

    inline QDBusReply<void> UnThrottle(uint cookie)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(cookie);
        return callWithArgumentList(QDBus::Block, QLatin1String("UnThrottle"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ActiveChanged(bool in0);
};

namespace org {
  namespace freedesktop {
    typedef ::OrgFreedesktopScreenSaverInterface ScreenSaver;
  }
}
#endif
